from fastapi import APIRouter, HTTPException, status
from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update
import os
from pathlib import Path
import aiofiles
import json
import numpy as np
from datetime import datetime
from ..utils import apply_die_cutting, load_dies
from ..database import get_async_db
from .. import models
from ..security import get_current_active_user

router = APIRouter(
    prefix="/answer",
    tags=["Answer"],
    dependencies=[Depends(get_current_active_user)],
)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a database c√¢u h·ªèi
QUESTION_DB_PATH = Path("question_database")

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c l∆∞u b√†i n·ªôp
SUBMISSIONS_PATH = Path("submissions")
SUBMISSIONS_PATH.mkdir(exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i

async def load_question(question_id):
    question_file = QUESTION_DB_PATH / f"{question_id}.json"
    with open(question_file, "r") as f:
        content = f.read()
        question_data = json.loads(content)
    return np.array(question_data.get("start")), np.array(question_data.get("goal")), question_data.get("numDies", None), question_data.get("numSteps", None)

async def check_solve(id, ops):
    dies = load_dies()
    state, goal, limit_dies, limit_step = await load_question(id)
    num_dies = len(dies); num_step = 99999999999999; count_step = 0; count_die = set()
    if limit_dies:
        num_dies = 0
    if limit_step:
        num_step = 0

    check = np.all(state == goal)
    if check:
        return True
    
    while not check:
        op = ops[count_step]
        count_die.add(op['p'])
        if count_step > num_step or len(count_die) > num_dies:
            break
        state = apply_die_cutting(state, dies[op['p']], op['x'], op['y'], op['s'])
        count_step += 1
        check = np.all(state == goal)
    
    if check:
        return True
    return False
    
# API n·ªôp b√†i
@router.post("")
async def submit_answer(data:dict, current_user: models.User = Depends(get_current_active_user), db: AsyncSession = Depends(get_async_db)):
    try:
        end_time = datetime.now()
        user_id = current_user.id
        step_factor = -0.3
        question_id = data.get("question_id")
        step_count = data.get("answer_data").get("n")
        ops = data.get("answer_data").get("ops")[:step_count]
        is_solved = await check_solve(question_id, ops)
        

        os.makedirs(f"{SUBMISSIONS_PATH}/{user_id}", exist_ok=True)
        with open(f"{SUBMISSIONS_PATH}/{user_id}/{question_id}.json", "w") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        
        # Update th√¥ng tin k·∫øt qu·∫£ v√†o user_id v√† question_id
        stmt = select(models.Submit).where(
            models.Submit.user_id == user_id,
            models.Submit.question_id == question_id
        )
        result = await db.execute(stmt)
        submit_record = result.scalars().first()
        total_time = (end_time - submit_record.start_time).total_seconds()

        points = submit_record.max_score + (step_factor * step_count) if is_solved else 0.0
        points = points - submit_record.resubmission_count

        if not submit_record:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Kh√¥ng t√¨m th·∫•y b·∫£n ghi Submit cho user_id v√† question_id ƒë√£ cho."
            )

        # C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        submit_record.end_time = end_time
        submit_record.step_count = step_count
        submit_record.resubmission_count += 1  # TƒÉng s·ªë l·∫ßn n·ªôp l·∫°i
        submit_record.total_time = total_time
        submit_record.status = 1 if is_solved else 0
        submit_record.score = points

        # Th·ª±c hi·ªán commit thay ƒë·ªïi
        await db.commit()
        await db.refresh(submit_record)

        return {
            "question_id": question_id,
            "user_id": user_id,
            "start_time": submit_record.start_time,
            "end_time": end_time,
            "step_factor": step_factor,
            "step_count": step_count,
            "total_time": total_time,
            "status": is_solved,
            "match_count": submit_record.max_score,
            "score": points
        }

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error submitting answer: {str(e)}",
        )
    

@router.get("/{id}")
async def get_answer(id: int, current_user: models.User = Depends(get_current_active_user), db: AsyncSession = Depends(get_async_db)):
    try:
        user_id = current_user.id
        stmt = select(models.Submit).where(
            models.Submit.question_id == id,
            models.Submit.user_id == user_id
        )
        result = await db.execute(stmt)
        submit_record = result.scalars().first()

        if not submit_record:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Kh√¥ng t√¨m th·∫•y b·∫£n ghi Submit cho id ƒë√£ cho."
            )

        return {
            "question_id": submit_record.question_id,
            "user_id": submit_record.user_id,
            "start_time": submit_record.start_time,
            "end_time": submit_record.end_time,
            "step_count": submit_record.step_count,
            "total_time": submit_record.total_time,
            "status": submit_record.status,
            "match_count": submit_record.max_score,
            "score": submit_record.score,
            "resubmission_count": submit_record.resubmission_count
        }

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error getting answer: {str(e)}",
        )

# @router.get("/{id}")
# async def get_answer(
#     id: int,
#     current_user: models.User = Depends(get_current_active_user),  # L·∫•y ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ token
#     db: AsyncSession = Depends(get_async_db)
# ):
#     # print('üü¢')
#     # print(current_user.id)
#     user_id = current_user.id
#     try:
#         stmt = select(models.Submit).where(
#             models.Submit.question_id == id,
#             models.Submit.user_id == user_id  # S·ª≠ d·ª•ng current_user.id thay v√¨ user_id
#         )
#         result = await db.execute(stmt)
#         submit_record = result.scalars().first()

#         if not submit_record:
#             raise HTTPException(
#                 status_code=status.HTTP_404_NOT_FOUND,
#                 detail="Kh√¥ng t√¨m th·∫•y b·∫£n ghi Submit cho id ƒë√£ cho.",
#             )

#         return {
#             "question_id": submit_record.question_id,
#             "user_id": submit_record.user_id,
#             "start_time": submit_record.start_time,
#             "end_time": submit_record.end_time,
#             "step_count": submit_record.step_count,
#             "total_time": submit_record.total_time,
#             "status": submit_record.status,
#             "match_count": submit_record.match_count,  # Gi·∫£ s·ª≠ b·∫°n ƒë√£ s·ª≠a l·∫°i t√™n tr∆∞·ªùng ƒë√∫ng
#             "score": submit_record.score,
#             "resubmission_count": submit_record.resubmission_count,
#         }

#     except HTTPException as he:
#         # Truy·ªÅn ti·∫øp HTTPException ƒë√£ n√©m
#         raise he
#     except Exception as e:
#         # X·ª≠ l√Ω c√°c ngo·∫°i l·ªá kh√°c
#         raise HTTPException(
#             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             detail=f"L·ªói khi l·∫•y c√¢u tr·∫£ l·ªùi: {str(e)}",
#         )